{"version":3,"sources":["components/MasonView.js"],"names":["encode","target","name","ctx","type","value","$ref","locations","references","f","exp","JSON","stringify","$v","indexOf","replace","s","$t","props","k","prop","console","log","v","undefined","push","computed","key","proto","$s","elements","filter","p","map","properties","src","parse","trim","body","expression","left","code","operator","right","MasonView","data","React","useMemo","root","go","pop","variant","language","generate"],"mappings":"sNAMA,SAASA,EAAOC,EAAQC,EAAMC,GAC1B,GAAsB,qBAAXF,EACP,MAAO,CAACG,KAAM,aAAcC,MAAO,aAEvC,GAAIJ,EAAOK,KACP,OAAIH,EAAII,UAAUN,EAAOK,MAAcH,EAAII,UAAUN,EAAOK,OAC5DH,EAAII,UAAUN,EAAOK,MAAQJ,EACtBF,EAAOG,EAAIK,WAAWP,EAAOK,MAAOJ,EAAMC,IAErD,IAyCQM,EAzCJC,EAAM,CAAEN,KAAM,UAAWC,MAAOM,KAAKC,UAAUX,IACnD,GAAyB,kBAAdA,EAAOY,KAAgD,IAA7BZ,EAAOY,GAAGC,QAAQ,MACnD,MAAO,CACH,KAAQ,kBACR,OAAU,CACN,CACI,KAAQ,kBACR,MAAS,CACL,IAAOb,EAAOY,GAAGE,QAAQ,UAAU,SAACC,GAAD,MAAO,KAAOA,KACjD,OAAUf,EAAOY,IAErB,MAAQ,IAGhB,YAAe,IAQvB,GALyB,qBAAdZ,EAAOY,KACdH,EAAM,CACFN,KAAM,UAAWC,MAAOJ,EAAOY,KAGrB,WAAdZ,EAAOgB,GAAiB,CACxB,IAAIC,EAAQ,GACZ,IAAM,IAAIC,KAAKlB,EAAOmB,KAAO,CACzBC,QAAQC,IAAIrB,EAAOmB,KAAKD,IACxB,IAAII,EAAIvB,EAAOC,EAAOmB,KAAKD,GAAGI,OAAGC,EAAWrB,GAC5Ce,EAAMO,KAAK,CACPrB,KAAM,WACNsB,UAAU,EACVC,IAAK,CAACvB,KAAM,UAAWC,MAAOc,GAC9Bd,MAAOkB,IAIXb,EADoB,oBAAnBT,EAAO2B,MAAMC,GACR,CAACzB,KAAM,kBAAmB0B,SAAUZ,EAAMa,QAAO,SAAAC,GAAC,MAAoB,WAAhBA,EAAEL,IAAItB,SAAoB4B,KAAI,SAAAD,GAAC,OAAIA,EAAE3B,UAE3F,CAACD,KAAM,mBAAoB8B,WAAYhB,GAGnC,aAAdjB,EAAOgB,KAOqBP,GAJxBD,EADCR,EAAOkC,IACJC,gBAAMnC,EAAOkC,IAAIE,QAEjBD,gBAAM,8BAEPE,KAAK,GAAGC,WAAmB9B,EAAE6B,KAAK,GAAGC,WACjC9B,EAAE6B,KAAK,IAGtB,GAAIpC,GAAsB,eAAdA,EAAKE,KAAuB,CACpC,IAAIoC,EAAOtC,EACM,wBAAbQ,EAAIN,KACJD,EAAIsC,KAAKhB,KAAKf,GAEdP,EAAIsC,KAAKhB,KAAK,CACVrB,KAAM,sBACNmC,WAAY,CACRnC,KAAM,uBACNsC,SAAU,IACVF,KAAMA,EACNG,MAAOjC,KAKvB,OAAOA,EAGI,SAASkC,EAAT,GAA4B,IAARC,EAAO,EAAPA,KAC/BxB,QAAQC,IAAI,OAAQuB,GAEpB,IAAI1C,EAAM2C,IAAMC,SAAQ,WACpB,GAAKF,GAASA,EAAKG,KAAnB,CACA3B,QAAQC,IAAIuB,GACZ,IAAI1C,EAAM,CACNK,WAAYqC,EAAKrC,WACjBiC,KAAM,GACNlC,UAAU,eACLsC,EAAKG,KAAK1C,KAAO,CAACF,KAAM,aAAcF,KAAM,YAGjD+C,EAAK9C,EAAIK,WAAWqC,EAAKG,KAAK1C,MAClC,IAAM,IAAIa,KAAK8B,EAAG7B,KACd,IAAI6B,EAAG7B,KAAKD,GAAGI,EAAEM,GAAjB,CACQ7B,EAAOiD,EAAG7B,KAAKD,GAAGI,EAAG,CAAEnB,KAAM,aAAcF,KAAMiB,GAAKhB,GACpD,cAANgB,GAEAhB,EAAIsC,KAAKS,MAGjB,OAAO/C,KACR,CAACQ,KAAKC,UAAUiC,KACnB,OAAK1C,EACG,kBAAC,IAAD,CAAYgD,QAAQ,SAC5B,kBAAC,IAAD,CAAWC,SAAS,cAAcC,mBAAS,CACvCjD,KAAM,UACNkC,KAAMnC,EAAIsC,SAJG","file":"static/js/6.c67d8d1c.chunk.js","sourcesContent":["import React from \"react\";\nimport {generate} from \"escodegen\";\nimport {parse} from \"esprima\";\nimport {Typography} from \"../material\";\nimport Highlight from \"react-highlight.js\";\n\nfunction encode(target, name, ctx) {\n    if (typeof target === \"undefined\") {\n        return {type: 'Identifier', value: 'undefined'};\n    }\n    if (target.$ref) {\n        if (ctx.locations[target.$ref]) return ctx.locations[target.$ref];\n        ctx.locations[target.$ref] = name;\n        return encode(ctx.references[target.$ref], name, ctx);\n    }\n    let exp = { type: \"Literal\", value: JSON.stringify(target) };\n    if (typeof target.$v === \"string\" && target.$v.indexOf(\"\\n\") !== -1) {\n        return {\n            \"type\": \"TemplateLiteral\",\n            \"quasis\": [\n                {\n                    \"type\": \"TemplateElement\",\n                    \"value\": {\n                        \"raw\": target.$v.replace(/[`\\\\]/g, (s) => '\\\\' + s),\n                        \"cooked\": target.$v\n                    },\n                    \"tail\": true\n                }\n            ],\n            \"expressions\": []\n        };\n    }\n    if (typeof target.$v !== \"undefined\") {\n        exp = {\n            type: \"Literal\", value: target.$v\n        };\n    }\n    if (target.$t === \"object\") {\n        let props = []\n        for ( let k in target.prop ) {\n            console.log(target.prop[k]);\n            let v = encode(target.prop[k].v, undefined, ctx);\n            props.push({\n                type: 'Property',\n                computed: false,\n                key: {type: 'Literal', value: k},\n                value: v\n            });\n        }\n        if ( target.proto.$s == '%ArrayPrototype%' ) {\n            exp = {type: 'ArrayExpression', elements: props.filter(p => p.key.value !== \"length\").map(p => p.value) };\n        } else {\n            exp = {type: 'ObjectExpression', properties: props};\n        }\n    }\n    if (target.$t === \"function\") {\n        let f;\n        if ( target.src ) {\n            f = parse(target.src.trim());\n        } else {\n            f = parse(`() => { \"builtin magic\" }`);\n        }\n        if ( f.body[0].expression ) exp = f.body[0].expression;\n        else exp = f.body[0];\n    }\n\n    if (name && name.type === \"Identifier\") {\n        let left = name;\n        if (exp.type === \"FunctionDeclaration\" ) {\n            ctx.code.push(exp);\n        } else {\n            ctx.code.push({\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: left,\n                    right: exp\n                }\n            });\n        }\n    }\n    return exp;\n}\n\nexport default function MasonView({data}) {\n    console.log(\"DATA\", data);\n \n    let ctx = React.useMemo(() => {\n        if (!data || !data.root) return;\n        console.log(data);\n        let ctx = {\n            references: data.references,\n            code: [],\n            locations: {\n                [data.root.$ref]: {type: 'Identifier', name: 'global'}\n            }\n        };\n        let go = ctx.references[data.root.$ref];\n        for ( let k in go.prop ) {\n            if (go.prop[k].v.$s) continue;\n            let r = encode(go.prop[k].v, { type: 'Identifier', name: k }, ctx);\n            if (k === 'proposals') {\n                //ctx.locations[go.prop[k].v.$ref] = { type: 'Identifier', name: 'proposals' };\n                ctx.code.pop();\n            }\n        }\n        return ctx;\n    }, [JSON.stringify(data)]);\n    if (!ctx) return <></>;\n    return (<Typography variant=\"body2\">\n    <Highlight language=\"javascript\">{generate({\n        type: 'Program',\n        body: ctx.code\n    })}</Highlight></Typography>);\n}"],"sourceRoot":""}