{"version":3,"sources":["components/MasonView.js"],"names":["encode","target","name","ctx","type","value","$ref","locations","references","f","exp","JSON","stringify","$v","indexOf","replace","s","$t","props","k","prop","console","log","v","object","computed","property","push","key","proto","$s","elements","filter","p","map","properties","src","parse","trim","tokens","comment","range","attachComments","comments","body","expression","left","code","operator","right","MasonView","data","React","useMemo","root","go","pop","variant","language","generate"],"mappings":"sNAMA,SAASA,EAAOC,EAAQC,EAAMC,GAC1B,GAAsB,qBAAXF,EACP,MAAO,CAACG,KAAM,aAAcC,MAAO,aAEvC,GAAIJ,EAAOK,KACP,OAAIH,EAAII,UAAUN,EAAOK,MAAcH,EAAII,UAAUN,EAAOK,OAC5DH,EAAII,UAAUN,EAAOK,MAAQJ,EACtBF,EAAOG,EAAIK,WAAWP,EAAOK,MAAOJ,EAAMC,IAErD,IA8CQM,EA9CJC,EAAM,CAAEN,KAAM,UAAWC,MAAOM,KAAKC,UAAUX,IACnD,GAAyB,kBAAdA,EAAOY,KAAgD,IAA7BZ,EAAOY,GAAGC,QAAQ,MACnD,MAAO,CACH,KAAQ,kBACR,OAAU,CACN,CACI,KAAQ,kBACR,MAAS,CACL,IAAOb,EAAOY,GAAGE,QAAQ,UAAU,SAACC,GAAD,MAAO,KAAOA,KACjD,OAAUf,EAAOY,IAErB,MAAQ,IAGhB,YAAe,IAQvB,GALyB,qBAAdZ,EAAOY,KACdH,EAAM,CACFN,KAAM,UAAWC,MAAOJ,EAAOY,KAGrB,WAAdZ,EAAOgB,GAAiB,CACxB,IAAIC,EAAQ,GACZ,IAAM,IAAIC,KAAKlB,EAAOmB,KAAO,CACzBC,QAAQC,IAAIrB,EAAOmB,KAAKD,IACxB,IAAII,EAAIvB,EAAOC,EAAOmB,KAAKD,GAAGI,EAAG,CAC7BnB,KAAM,mBACNoB,OAAQtB,EACRuB,UAAU,EACVC,SAAU,CAACtB,KAAM,UAAWC,MAAOc,IACpChB,GACHe,EAAMS,KAAK,CACPvB,KAAM,WACNqB,UAAU,EACVG,IAAK,CAACxB,KAAM,UAAWC,MAAOc,GAC9Bd,MAAOkB,IAIXb,EADqB,qBAApBT,EAAO4B,MAAMC,GACR,CAAC1B,KAAM,kBAAmB2B,SAAUb,EAAMc,QAAO,SAAAC,GAAC,MAAoB,WAAhBA,EAAEL,IAAIvB,SAAoB6B,KAAI,SAAAD,GAAC,OAAIA,EAAE5B,UAE3F,CAACD,KAAM,mBAAoB+B,WAAYjB,GAGnC,aAAdjB,EAAOgB,KAEFhB,EAAOmC,KACR3B,EAAI4B,gBAAMpC,EAAOmC,IAAIE,OAAQ,CAACC,QAAQ,EAAMC,SAAS,EAAMC,OAAO,IAClEC,yBAAejC,EAAGA,EAAEkC,SAAUlC,EAAE8B,SAEhC9B,EAAI4B,gBAAM,6BAEc3B,EAAvBD,EAAEmC,KAAK,GAAGC,WAAmBpC,EAAEmC,KAAK,GAAGC,WACjCpC,EAAEmC,KAAK,IAGtB,GAAI1C,GAAsB,eAAdA,EAAKE,KAAuB,CACpC,IAAI0C,EAAO5C,EACM,wBAAbQ,EAAIN,KACJD,EAAI4C,KAAKpB,KAAKjB,GAEdP,EAAI4C,KAAKpB,KAAK,CACVvB,KAAM,sBACNyC,WAAY,CACRzC,KAAM,uBACN4C,SAAU,IACVF,KAAMA,EACNG,MAAOvC,KAKvB,OAAOA,EAGI,SAASwC,EAAT,GAA4B,IAARC,EAAO,EAAPA,KAC/B9B,QAAQC,IAAI,OAAQ6B,GAEpB,IAAIhD,EAAMiD,IAAMC,SAAQ,WACpB,GAAKF,GAASA,EAAKG,KAAnB,CACAjC,QAAQC,IAAI6B,GACZ,IAAIhD,EAAM,CACNK,WAAY2C,EAAK3C,WACjBuC,KAAM,GACNxC,UAAU,eACL4C,EAAKG,KAAKhD,KAAO,CAACF,KAAM,aAAcF,KAAM,YAGjDqD,EAAKpD,EAAIK,WAAW2C,EAAKG,KAAKhD,MAClC,IAAM,IAAIa,KAAKoC,EAAGnC,KACd,IAAImC,EAAGnC,KAAKD,GAAGI,EAAEO,GAAjB,CACQ9B,EAAOuD,EAAGnC,KAAKD,GAAGI,EAAG,CAAEnB,KAAM,aAAcF,KAAMiB,GAAKhB,GACpD,cAANgB,GAEAhB,EAAI4C,KAAKS,MAGjB,OAAOrD,KACR,CAACQ,KAAKC,UAAUuC,KACnB,OAAKhD,EACG,kBAAC,IAAD,CAAYsD,QAAQ,SAC5B,kBAAC,IAAD,CAAWC,SAAS,cAAcC,mBAAS,CACvCvD,KAAM,UACNwC,KAAMzC,EAAI4C,MACX,CAAEP,SAAS,MALG","file":"static/js/6.241c8fd2.chunk.js","sourcesContent":["import React from \"react\";\nimport {generate, attachComments} from \"escodegen\";\nimport {parse} from \"esprima\";\nimport {Typography} from \"../material\";\nimport Highlight from \"react-highlight.js\";\n\nfunction encode(target, name, ctx) {\n    if (typeof target === \"undefined\") {\n        return {type: 'Identifier', value: 'undefined'};\n    }\n    if (target.$ref) {\n        if (ctx.locations[target.$ref]) return ctx.locations[target.$ref];\n        ctx.locations[target.$ref] = name;\n        return encode(ctx.references[target.$ref], name, ctx);\n    }\n    let exp = { type: \"Literal\", value: JSON.stringify(target) };\n    if (typeof target.$v === \"string\" && target.$v.indexOf(\"\\n\") !== -1) {\n        return {\n            \"type\": \"TemplateLiteral\",\n            \"quasis\": [\n                {\n                    \"type\": \"TemplateElement\",\n                    \"value\": {\n                        \"raw\": target.$v.replace(/[`\\\\]/g, (s) => '\\\\' + s),\n                        \"cooked\": target.$v\n                    },\n                    \"tail\": true\n                }\n            ],\n            \"expressions\": []\n        };\n    }\n    if (typeof target.$v !== \"undefined\") {\n        exp = {\n            type: \"Literal\", value: target.$v\n        };\n    }\n    if (target.$t === \"object\") {\n        let props = []\n        for ( let k in target.prop ) {\n            console.log(target.prop[k]);\n            let v = encode(target.prop[k].v, {\n                type: 'MemberExpression',\n                object: name,\n                computed: true,\n                property: {type: \"Literal\", value: k}\n            }, ctx);\n            props.push({\n                type: 'Property',\n                computed: false,\n                key: {type: 'Literal', value: k},\n                value: v\n            });\n        }\n        if ( target.proto.$s === '%ArrayPrototype%' ) {\n            exp = {type: 'ArrayExpression', elements: props.filter(p => p.key.value !== \"length\").map(p => p.value) };\n        } else {\n            exp = {type: 'ObjectExpression', properties: props};\n        }\n    }\n    if (target.$t === \"function\") {\n        let f;\n        if ( target.src ) {\n            f = parse(target.src.trim(), {tokens: true, comment: true, range: true});\n            attachComments(f, f.comments, f.tokens);\n        } else {\n            f = parse(`() => { \"builtin magic\" }`);\n        }\n        if ( f.body[0].expression ) exp = f.body[0].expression;\n        else exp = f.body[0];\n    }\n\n    if (name && name.type === \"Identifier\") {\n        let left = name;\n        if (exp.type === \"FunctionDeclaration\" ) {\n            ctx.code.push(exp);\n        } else {\n            ctx.code.push({\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: left,\n                    right: exp\n                }\n            });\n        }\n    }\n    return exp;\n}\n\nexport default function MasonView({data}) {\n    console.log(\"DATA\", data);\n \n    let ctx = React.useMemo(() => {\n        if (!data || !data.root) return;\n        console.log(data);\n        let ctx = {\n            references: data.references,\n            code: [],\n            locations: {\n                [data.root.$ref]: {type: 'Identifier', name: 'global'}\n            }\n        };\n        let go = ctx.references[data.root.$ref];\n        for ( let k in go.prop ) {\n            if (go.prop[k].v.$s) continue;\n            let r = encode(go.prop[k].v, { type: 'Identifier', name: k }, ctx);\n            if (k === 'proposals') {\n                //ctx.locations[go.prop[k].v.$ref] = { type: 'Identifier', name: 'proposals' };\n                ctx.code.pop();\n            }\n        }\n        return ctx;\n    }, [JSON.stringify(data)]);\n    if (!ctx) return <></>;\n    return (<Typography variant=\"body2\">\n    <Highlight language=\"javascript\">{generate({\n        type: 'Program',\n        body: ctx.code\n    }, { comment: true })}</Highlight></Typography>);\n}"],"sourceRoot":""}