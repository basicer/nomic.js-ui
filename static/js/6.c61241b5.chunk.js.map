{"version":3,"sources":["components/MasonView.js"],"names":["encode","target","name","ctx","type","value","$ref","locations","references","exp","JSON","stringify","$v","$t","props","k","prop","console","log","v","undefined","push","computed","key","proto","$s","elements","filter","p","map","properties","src","parse","trim","body","expression","left","code","operator","right","MasonView","data","React","useMemo","root","go","language","generate"],"mappings":"+MAMA,SAASA,EAAOC,EAAQC,EAAMC,GAC1B,GAAsB,qBAAXF,EACP,MAAO,CAACG,KAAM,aAAcC,MAAO,aAEvC,GAAIJ,EAAOK,KACP,OAAIH,EAAII,UAAUN,EAAOK,MAAcH,EAAII,UAAUN,EAAOK,OAC5DH,EAAII,UAAUN,EAAOK,MAAQJ,EACtBF,EAAOG,EAAIK,WAAWP,EAAOK,MAAOJ,EAAMC,IAErD,IAAIM,EAAM,CAAEL,KAAM,UAAWC,MAAOK,KAAKC,UAAUV,IACnD,GAAyB,kBAAdA,EAAOW,GACd,MAAO,CACH,KAAQ,kBACR,OAAU,CACN,CACI,KAAQ,kBACR,MAAS,CACL,IAAOX,EAAOW,GACd,OAAUX,EAAOW,IAErB,MAAQ,IAGhB,YAAe,IAQvB,GALyB,qBAAdX,EAAOW,KACdH,EAAM,CACFL,KAAM,UAAWC,MAAOJ,EAAOW,KAGrB,WAAdX,EAAOY,GAAiB,CACxB,IAAIC,EAAQ,GACZ,IAAM,IAAIC,KAAKd,EAAOe,KAAO,CACzBC,QAAQC,IAAIjB,EAAOe,KAAKD,IACxB,IAAII,EAAInB,EAAOC,EAAOe,KAAKD,GAAGI,OAAGC,EAAWjB,GAC5CW,EAAMO,KAAK,CACPjB,KAAM,WACNkB,UAAU,EACVC,IAAK,CAACnB,KAAM,UAAWC,MAAOU,GAC9BV,MAAOc,IAIXV,EADoB,oBAAnBR,EAAOuB,MAAMC,GACR,CAACrB,KAAM,kBAAmBsB,SAAUZ,EAAMa,QAAO,SAAAC,GAAC,MAAoB,WAAhBA,EAAEL,IAAIlB,SAAoBwB,KAAI,SAAAD,GAAC,OAAIA,EAAEvB,UAE3F,CAACD,KAAM,mBAAoB0B,WAAYhB,GAGrD,GAAkB,aAAdb,EAAOY,GAOP,OALKZ,EAAO8B,IACJC,gBAAM/B,EAAO8B,IAAIE,QAEjBD,gBAAM,kCAELE,KAAK,GAAGC,WAGrB,GAAIjC,GAAsB,eAAdA,EAAKE,KAAuB,CACpC,IAAIgC,EAAOlC,EACXC,EAAIkC,KAAKhB,KAAK,CACVjB,KAAM,sBACN+B,WAAY,CACR/B,KAAM,uBACNkC,SAAU,IACVF,KAAMA,EACNG,MAAO9B,KAInB,OAAOA,EAGI,SAAS+B,EAAT,GAA4B,IAARC,EAAO,EAAPA,KAC/BxB,QAAQC,IAAI,OAAQuB,GAEpB,IAAItC,EAAMuC,IAAMC,SAAQ,WACpB,GAAKF,GAASA,EAAKG,KAAnB,CACA3B,QAAQC,IAAIuB,GACZ,IAAItC,EAAM,CACNK,WAAYiC,EAAKjC,WACjB6B,KAAM,GACN9B,UAAU,eACLkC,EAAKG,KAAKtC,KAAO,CAACF,KAAM,aAAcF,KAAM,YAGjD2C,EAAK1C,EAAIK,WAAWiC,EAAKG,KAAKtC,MAClC,IAAM,IAAIS,KAAK8B,EAAG7B,KACV6B,EAAG7B,KAAKD,GAAGI,EAAEM,IACjBzB,EAAO6C,EAAG7B,KAAKD,GAAGI,EAAG,CAAEf,KAAM,aAAcF,KAAMa,GAAKZ,GAE1D,OAAOA,KACR,CAACsC,IACJ,OAAKtC,EACE,kBAAC,IAAD,CAAW2C,SAAS,cAAcC,mBAAS,CAC9C3C,KAAM,UACN8B,KAAM/B,EAAIkC,QAHG","file":"static/js/6.c61241b5.chunk.js","sourcesContent":["import React from \"react\";\nimport {generate} from \"escodegen\";\nimport {parse} from \"esprima\";\n\nimport Highlight from \"react-highlight.js\";\n\nfunction encode(target, name, ctx) {\n    if (typeof target === \"undefined\") {\n        return {type: 'Identifier', value: 'undefined'};\n    }\n    if (target.$ref) {\n        if (ctx.locations[target.$ref]) return ctx.locations[target.$ref];\n        ctx.locations[target.$ref] = name;\n        return encode(ctx.references[target.$ref], name, ctx);\n    }\n    let exp = { type: \"Literal\", value: JSON.stringify(target) };\n    if (typeof target.$v === \"string\") {\n        return {\n            \"type\": \"TemplateLiteral\",\n            \"quasis\": [\n                {\n                    \"type\": \"TemplateElement\",\n                    \"value\": {\n                        \"raw\": target.$v,\n                        \"cooked\": target.$v\n                    },\n                    \"tail\": true\n                }\n            ],\n            \"expressions\": []\n        };\n    }\n    if (typeof target.$v !== \"undefined\") {\n        exp = {\n            type: \"Literal\", value: target.$v\n        };\n    }\n    if (target.$t === \"object\") {\n        let props = []\n        for ( let k in target.prop ) {\n            console.log(target.prop[k]);\n            let v = encode(target.prop[k].v, undefined, ctx);\n            props.push({\n                type: 'Property',\n                computed: false,\n                key: {type: 'Literal', value: k},\n                value: v\n            });\n        }\n        if ( target.proto.$s == '%ArrayPrototype%' ) {\n            exp = {type: 'ArrayExpression', elements: props.filter(p => p.key.value !== \"length\").map(p => p.value) };\n        } else {\n            exp = {type: 'ObjectExpression', properties: props};\n        }\n    }\n    if (target.$t === \"function\") {\n        let f;\n        if ( target.src ) {\n            f = parse(target.src.trim());\n        } else {\n            f = parse(`() => { /* builtin magic */ }`);\n        }\n        return f.body[0].expression;\n    }\n\n    if (name && name.type === \"Identifier\") {\n        let left = name;\n        ctx.code.push({\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: left,\n                right: exp\n            }\n        });\n    }\n    return exp;\n}\n\nexport default function MasonView({data}) {\n    console.log(\"DATA\", data);\n \n    let ctx = React.useMemo(() => {\n        if (!data || !data.root) return;\n        console.log(data);\n        let ctx = {\n            references: data.references,\n            code: [],\n            locations: {\n                [data.root.$ref]: {type: 'Identifier', name: 'global'}\n            }\n        };\n        let go = ctx.references[data.root.$ref];\n        for ( let k in go.prop ) {\n            if (go.prop[k].v.$s) continue;\n            encode(go.prop[k].v, { type: 'Identifier', name: k }, ctx);\n        }\n        return ctx;\n    }, [data]);\n    if (!ctx) return \"Empty\";\n    return <Highlight language=\"javascript\">{generate({\n        type: 'Program',\n        body: ctx.code\n    })}</Highlight>\n}"],"sourceRoot":""}