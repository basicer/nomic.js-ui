{"version":3,"sources":["components/MasonView.js"],"names":["encode","target","name","ctx","type","value","$ref","locations","references","exp","JSON","stringify","$v","indexOf","replace","s","$t","props","k","prop","v","object","computed","property","push","key","test","proto","$s","elements","filter","p","map","properties","f","src","parse","trim","tokens","comment","range","attachComments","comments","body","expression","left","code","operator","right","MasonView","data","React","useMemo","root","go","pop","variant","language","generate"],"mappings":"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","file":"static/js/6.39bcf039.chunk.js","sourcesContent":["import React from \"react\";\nimport {generate, attachComments} from \"escodegen\";\nimport {parse} from \"esprima\";\nimport {Typography} from \"../material\";\nimport Highlight from \"react-highlight.js\";\n\nfunction encode(target, name, ctx) {\n    if (typeof target === \"undefined\") {\n        return {type: 'Identifier', value: 'undefined'};\n    }\n    if (target.$ref) {\n        if (ctx.locations[target.$ref]) return ctx.locations[target.$ref];\n        ctx.locations[target.$ref] = name;\n        return encode(ctx.references[target.$ref], name, ctx);\n    }\n    let exp = { type: \"Literal\", value: JSON.stringify(target) };\n    if (typeof target.$v === \"string\" && target.$v.indexOf(\"\\n\") !== -1) {\n        exp = {\n            \"type\": \"TemplateLiteral\",\n            \"quasis\": [\n                {\n                    \"type\": \"TemplateElement\",\n                    \"value\": {\n                        \"raw\": target.$v.replace(/[`\\\\]/g, (s) => '\\\\' + s),\n                        \"cooked\": target.$v\n                    },\n                    \"tail\": true\n                }\n            ],\n            \"expressions\": []\n        };\n    }\n    else if (typeof target.$v !== \"undefined\") {\n        exp = {\n            type: \"Literal\", value: target.$v\n        };\n    }\n    else if (target.$t === \"object\") {\n        let props = []\n        for ( let k in target.prop ) {\n            //console.log(target.prop[k]);\n            let v = encode(target.prop[k].v, {\n                type: 'MemberExpression',\n                object: name,\n                computed: true,\n                property: {type: \"Literal\", value: k}\n            }, ctx);\n            props.push({\n                type: 'Property',\n                computed: false,\n                key: /^[a-zA-Z0-9]*$/.test(k) ? {type: 'Identifier', name: k} : {type: 'Literal', value: k},\n                value: v\n            });\n        }\n        if ( target.proto.$s === '%ArrayPrototype%' ) {\n            exp = {type: 'ArrayExpression', elements: props.filter(p => p.key.value !== \"length\").map(p => p.value) };\n        } else {\n            exp = {type: 'ObjectExpression', properties: props};\n        }\n    }\n    else if (target.$t === \"function\") {\n        let f;\n        if ( target.src ) {\n            f = parse(target.src.trim(), {tokens: true, comment: true, range: true});\n            attachComments(f, f.comments, f.tokens);\n        } else {\n            f = parse(`() => { \"builtin magic\" }`);\n        }\n        if ( f.body[0].expression ) exp = f.body[0].expression;\n        else exp = f.body[0];\n    }\n\n    if (name && name.type === \"Identifier\") {\n        let left = name;\n        if (exp.type === \"FunctionDeclaration\" ) {\n            ctx.code.push(exp);\n        } else {\n            ctx.code.push({\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: left,\n                    right: exp\n                }\n            });\n        }\n    }\n    return exp;\n}\n\nexport default function MasonView({data}) {\n    let ctx = React.useMemo(() => {\n        if (!data || !data.root) return;\n        //console.log(data);\n        let ctx = {\n            references: data.references,\n            code: [],\n            locations: {\n                [data.root.$ref]: {type: 'Identifier', name: 'global'}\n            }\n        };\n        let go = ctx.references[data.root.$ref];\n        for ( let k in go.prop ) {\n            if (go.prop[k].v.$s) continue;\n            let r = encode(go.prop[k].v, { type: 'Identifier', name: k }, ctx);\n            if (k === 'proposals' || k === \"banner\" || k === 'global') {\n                ctx.code.pop();\n            }\n        }\n        return ctx;\n    }, [JSON.stringify(data)]);\n    if (!ctx) return <></>;\n    return (<Typography variant=\"body2\">\n    <Highlight language=\"javascript\">{generate({\n        type: 'Program',\n        body: ctx.code\n    }, { comment: true })}</Highlight></Typography>);\n}"],"sourceRoot":""}