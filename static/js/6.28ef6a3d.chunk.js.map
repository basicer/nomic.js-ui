{"version":3,"sources":["components/MasonView.js"],"names":["encode","target","name","ctx","type","value","$ref","locations","references","exp","JSON","stringify","$v","indexOf","replace","s","$t","props","k","prop","console","log","v","undefined","push","computed","key","proto","$s","elements","filter","p","map","properties","src","parse","trim","body","expression","left","code","operator","right","MasonView","data","React","useMemo","root","go","pop","variant","language","generate"],"mappings":"sNAMA,SAASA,EAAOC,EAAQC,EAAMC,GAC1B,GAAsB,qBAAXF,EACP,MAAO,CAACG,KAAM,aAAcC,MAAO,aAEvC,GAAIJ,EAAOK,KACP,OAAIH,EAAII,UAAUN,EAAOK,MAAcH,EAAII,UAAUN,EAAOK,OAC5DH,EAAII,UAAUN,EAAOK,MAAQJ,EACtBF,EAAOG,EAAIK,WAAWP,EAAOK,MAAOJ,EAAMC,IAErD,IAAIM,EAAM,CAAEL,KAAM,UAAWC,MAAOK,KAAKC,UAAUV,IACnD,GAAyB,kBAAdA,EAAOW,KAAgD,IAA7BX,EAAOW,GAAGC,QAAQ,MACnD,MAAO,CACH,KAAQ,kBACR,OAAU,CACN,CACI,KAAQ,kBACR,MAAS,CACL,IAAOZ,EAAOW,GAAGE,QAAQ,UAAU,SAACC,GAAD,MAAO,KAAOA,KACjD,OAAUd,EAAOW,IAErB,MAAQ,IAGhB,YAAe,IAQvB,GALyB,qBAAdX,EAAOW,KACdH,EAAM,CACFL,KAAM,UAAWC,MAAOJ,EAAOW,KAGrB,WAAdX,EAAOe,GAAiB,CACxB,IAAIC,EAAQ,GACZ,IAAM,IAAIC,KAAKjB,EAAOkB,KAAO,CACzBC,QAAQC,IAAIpB,EAAOkB,KAAKD,IACxB,IAAII,EAAItB,EAAOC,EAAOkB,KAAKD,GAAGI,OAAGC,EAAWpB,GAC5Cc,EAAMO,KAAK,CACPpB,KAAM,WACNqB,UAAU,EACVC,IAAK,CAACtB,KAAM,UAAWC,MAAOa,GAC9Bb,MAAOiB,IAIXb,EADoB,oBAAnBR,EAAO0B,MAAMC,GACR,CAACxB,KAAM,kBAAmByB,SAAUZ,EAAMa,QAAO,SAAAC,GAAC,MAAoB,WAAhBA,EAAEL,IAAIrB,SAAoB2B,KAAI,SAAAD,GAAC,OAAIA,EAAE1B,UAE3F,CAACD,KAAM,mBAAoB6B,WAAYhB,GAGrD,GAAkB,aAAdhB,EAAOe,GAOP,OALKf,EAAOiC,IACJC,gBAAMlC,EAAOiC,IAAIE,QAEjBD,gBAAM,kCAELE,KAAK,GAAGC,WAGrB,GAAIpC,GAAsB,eAAdA,EAAKE,KAAuB,CACpC,IAAImC,EAAOrC,EACXC,EAAIqC,KAAKhB,KAAK,CACVpB,KAAM,sBACNkC,WAAY,CACRlC,KAAM,uBACNqC,SAAU,IACVF,KAAMA,EACNG,MAAOjC,KAInB,OAAOA,EAGI,SAASkC,EAAT,GAA4B,IAARC,EAAO,EAAPA,KAC/BxB,QAAQC,IAAI,OAAQuB,GAEpB,IAAIzC,EAAM0C,IAAMC,SAAQ,WACpB,GAAKF,GAASA,EAAKG,KAAnB,CACA3B,QAAQC,IAAIuB,GACZ,IAAIzC,EAAM,CACNK,WAAYoC,EAAKpC,WACjBgC,KAAM,GACNjC,UAAU,eACLqC,EAAKG,KAAKzC,KAAO,CAACF,KAAM,aAAcF,KAAM,YAGjD8C,EAAK7C,EAAIK,WAAWoC,EAAKG,KAAKzC,MAClC,IAAM,IAAIY,KAAK8B,EAAG7B,KACV6B,EAAG7B,KAAKD,GAAGI,EAAEM,KACjB5B,EAAOgD,EAAG7B,KAAKD,GAAGI,EAAG,CAAElB,KAAM,aAAcF,KAAMgB,GAAKf,GAC5C,cAANe,GAEAf,EAAIqC,KAAKS,OAGjB,OAAO9C,KACR,CAACO,KAAKC,UAAUiC,KACnB,OAAKzC,EACG,kBAAC,IAAD,CAAY+C,QAAQ,SAC5B,kBAAC,IAAD,CAAWC,SAAS,cAAcC,mBAAS,CACvChD,KAAM,UACNiC,KAAMlC,EAAIqC,SAJG","file":"static/js/6.28ef6a3d.chunk.js","sourcesContent":["import React from \"react\";\nimport {generate} from \"escodegen\";\nimport {parse} from \"esprima\";\nimport {Typography} from \"../material\";\nimport Highlight from \"react-highlight.js\";\n\nfunction encode(target, name, ctx) {\n    if (typeof target === \"undefined\") {\n        return {type: 'Identifier', value: 'undefined'};\n    }\n    if (target.$ref) {\n        if (ctx.locations[target.$ref]) return ctx.locations[target.$ref];\n        ctx.locations[target.$ref] = name;\n        return encode(ctx.references[target.$ref], name, ctx);\n    }\n    let exp = { type: \"Literal\", value: JSON.stringify(target) };\n    if (typeof target.$v === \"string\" && target.$v.indexOf(\"\\n\") !== -1) {\n        return {\n            \"type\": \"TemplateLiteral\",\n            \"quasis\": [\n                {\n                    \"type\": \"TemplateElement\",\n                    \"value\": {\n                        \"raw\": target.$v.replace(/[`\\\\]/g, (s) => '\\\\' + s),\n                        \"cooked\": target.$v\n                    },\n                    \"tail\": true\n                }\n            ],\n            \"expressions\": []\n        };\n    }\n    if (typeof target.$v !== \"undefined\") {\n        exp = {\n            type: \"Literal\", value: target.$v\n        };\n    }\n    if (target.$t === \"object\") {\n        let props = []\n        for ( let k in target.prop ) {\n            console.log(target.prop[k]);\n            let v = encode(target.prop[k].v, undefined, ctx);\n            props.push({\n                type: 'Property',\n                computed: false,\n                key: {type: 'Literal', value: k},\n                value: v\n            });\n        }\n        if ( target.proto.$s == '%ArrayPrototype%' ) {\n            exp = {type: 'ArrayExpression', elements: props.filter(p => p.key.value !== \"length\").map(p => p.value) };\n        } else {\n            exp = {type: 'ObjectExpression', properties: props};\n        }\n    }\n    if (target.$t === \"function\") {\n        let f;\n        if ( target.src ) {\n            f = parse(target.src.trim());\n        } else {\n            f = parse(`() => { /* builtin magic */ }`);\n        }\n        return f.body[0].expression;\n    }\n\n    if (name && name.type === \"Identifier\") {\n        let left = name;\n        ctx.code.push({\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: left,\n                right: exp\n            }\n        });\n    }\n    return exp;\n}\n\nexport default function MasonView({data}) {\n    console.log(\"DATA\", data);\n \n    let ctx = React.useMemo(() => {\n        if (!data || !data.root) return;\n        console.log(data);\n        let ctx = {\n            references: data.references,\n            code: [],\n            locations: {\n                [data.root.$ref]: {type: 'Identifier', name: 'global'}\n            }\n        };\n        let go = ctx.references[data.root.$ref];\n        for ( let k in go.prop ) {\n            if (go.prop[k].v.$s) continue;\n            encode(go.prop[k].v, { type: 'Identifier', name: k }, ctx);\n            if (k === 'proposals') {\n                //ctx.locations[go.prop[k].v.$ref] = { type: 'Identifier', name: 'proposals' };\n                ctx.code.pop();\n            }\n        }\n        return ctx;\n    }, [JSON.stringify(data)]);\n    if (!ctx) return <></>;\n    return (<Typography variant=\"body2\">\n    <Highlight language=\"javascript\">{generate({\n        type: 'Program',\n        body: ctx.code\n    })}</Highlight></Typography>);\n}"],"sourceRoot":""}